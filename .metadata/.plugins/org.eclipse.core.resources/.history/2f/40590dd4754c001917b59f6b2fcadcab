package rovar;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * 
 * @author Marko Radenkovic, Emil Ögge
 *
 */
public class ClockTest {

	/**
	 * Vi är inne i CHANGE_TIME S3 och vi vill CM till DISPLAY_DATE, detta ska inte fungera eftersom vi måste först
	 * sätta tiden S.
	 */
	@Test
	public void transitionTest1() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready(); // S3 CHANGE_TIME
		String result = clock.changeMode();
		assertEquals( "CHANGE_TIME", result);	// Null/Invalid transition returns the same state: S3.
	}

	/**
	 * Vi är inne i CHANGE_DATE S4 och vi vill CM till DISPLAY_TIME, detta ska inte fungera eftersom vi måste först
	 * sätta tiden S.
	 */
	@Test
	public void transitionTest2() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode(); // S2 DISPLAY_DATE
		clock.ready(); // S4 CHANGE_DATE
		String result = clock.changeMode();
		assertEquals( "CHANGE_DATE", result);	// Null/Invalid transition returns to the same state: S4.
	}
	
	/**
	 * Vi är inne i CHANGE_TIME S3 och vi vill anropa metoden för att sätta tid igen. Det går inte eftersom vi redan håller
	 * på att sätta tiden.
	 */
	@Test
	public void transitionTest3() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready(); // S3 CHANGE_TIME
		String result = clock.ready();
		assertEquals( "CHANGE_TIME", result);	// Null/Invalid transition returns to the same state: S3.
	}
	
	/**
	 * Vi är inne i CHANGE_DATE S4 och vi vill anropa metoden för att sätta datum igen. Det går inte eftersom vi redan håller 
	 * på att ändra tiden.
	 */
	@Test
	public void transitionTest4() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode(); // S2 DISPLAY_DATE
		clock.ready(); // S4 CHANGE_DATE
		String result = clock.ready();
		assertEquals( "CHANGE_DATE", result);	// Null/Invalid transition returns to the same state: S4.
	}
	
	/**
	 * Vi är inne i DISPLAY_TIME S1 och vill sätta tiden. Men detta fungerar inte eftersom vi måste först gå till CHANGE_TIME S3.
	 */
	@Test
	public void transitionTest5() {
		Clock clock = new Clock(); // Default: S1 DISPLAY_TIME
		String result = clock.set(1, 1, 1);
		assertEquals( "DISPLAY_TIME", result); // Null/Invalid transition returns to the same state: S1.
	}
	
	/**
	 * Vi är inne i DISPLAY_DATE S2 och vill sätta datumet. Men detta fungerar inte eftersom vi måste först gå till CHANGE_DATE S4.
	 */
	@Test
	public void transitionTest6() {
		Clock clock = new Clock(); // Default: S1 DISPLAY_TIME
		clock.changeMode(); // S2 DISPLAY_DATE
		String result = clock.set(1, 1, 1);
		assertEquals( "DISPLAY_DATE", result); // Null/Invalid transition returns to the same state: S2.
	}
	
	/** 
	 * VALID TRANSITION 	S2 --> S1
	 */
	@Test
	public void transitionTest7() {
		Clock clock = new Clock(); // Default: S1 DISPLAY_TIME
		clock.changeMode(); // S2
		String result = clock.changeMode(); // S1
		assertEquals( "0:0:0", result); //  Test default values in Time-class.
	}
	
	/** 
	 * VALID TRANSITION 	S1 --> READY --> S3
	 */
	@Test
	public void transitionTest8() {
		Clock clock = new Clock(); // Default: S1 DISPLAY_TIME
		String result = clock.ready(); // S3
		assertEquals( "CHANGE_TIME", result); //  S3 confirmation.
	}
	
	/** 
	 * VALID TRANSITION 	S3 --> S1
	 */
	@Test
	public void transitionTest9() {
		Clock clock = new Clock(); // Default: S1 DISPLAY_TIME
		clock.ready(); // S3
		String result = clock.set(12, 30, 30); // S1
		assertEquals( "12:30:30", result); //  S1 Set time confirmation
	}
	
	/** 
	 * VALID TRANSITION 	S1 --> S2
	 */
	@Test
	public void transitionTest10() {
		Clock clock = new Clock(); // Default: S1 DISPLAY_TIME
		String result = clock.changeMode(); // S2 DISPLAY_DATE
		assertEquals( "1900-1-1", result); //  Test default values in DATE-class.
	}
	
	/** 
	 * VALID TRANSITION 	S2 --> S4
	 */
	@Test
	public void transitionTest11() {
		Clock clock = new Clock(); // Default: S1 DISPLAY_TIME
		clock.changeMode(); // S2 DISPLAY_DATE
		String result = clock.ready(); // S4 CHANGE_DATE
		assertEquals( "CHANGE_DATE", result); //  S4 Confirmation
	}
	
	/** 
	 * VALID TRANSITION 	S4 --> S2
	 */
	@Test
	public void transitionTest12() {
		Clock clock = new Clock(); // Default: S1 DISPLAY_TIME
		clock.changeMode(); // S2 DISPLAY_DATE
		clock.ready(); // S4 CHANGE_DATE
		String result = clock.set(2000, 10, 10);
		assertEquals( "2000-10-10", result); //  Test default values in Time-class.
	}
	
	
	
	
	
	
	// 24 BVA Tests
	// year >= 1900		year <= 2100	month >= 1		month <= 12		day >= 1 		day <= 31
	// hour >= 0	 	hour <= 23		minute >= 0		minute <= 59	second >= 0		second <= 59
	
	@Test
	public void bvaTest1() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "1900-5-5", clock.set(1899, 5, 5));			// TEST YEAR
	}
	@Test
	public void bvaTest2() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "1900-5-5", clock.set(1900, 5, 5));			// TEST YEAR
	}
	@Test
	public void bvaTest3() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "1900-5-5", clock.set(2101, 5, 5));			// TEST YEAR
	}
	@Test
	public void bvaTest4() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "2100-5-5", clock.set(2100, 5, 5));			// TEST YEAR
	}
	
	
	
	@Test
	public void bvaTest5() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "2000-1-5", clock.set(2000, 0, 5));			// TEST MONTH
	}
	@Test
	public void bvaTest6() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "2000-1-5", clock.set(2000, 1, 5));			// TEST MONTH
	}
	@Test
	public void bvaTest7() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "2000-1-5", clock.set(2000, 13, 5));			// TEST MONTH
	}
	@Test
	public void bvaTest8() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "2000-12-5", clock.set(2000, 12, 5));			// TEST MONTH
	}
	
	
	
	@Test
	public void bvaTest9() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "2000-5-1", clock.set(2000, 5, 0));			// TEST DAY
	}
	@Test
	public void bvaTest10() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "2000-5-1", clock.set(2000, 5, 1));			// TEST DAY
	}
	@Test
	public void bvaTest11() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "2000-5-1", clock.set(2000, 5, 32));			// TEST DAY
	}
	@Test
	public void bvaTest12() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.changeMode();	// S2 DISPLAY_DATE
		clock.ready();
		assertEquals( "2000-5-31", clock.set(2000, 5, 31));			// TEST DAY
	}
	
	
	
	@Test
	public void bvaTest13() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "0:30:30", clock.set(-1, 30, 30));			// TEST HOUR
	}
	@Test
	public void bvaTest14() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "0:30:30", clock.set(0, 30, 30));				// TEST HOUR
	}
	@Test
	public void bvaTest15() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "0:30:30", clock.set(24, 30, 30));			// TEST HOUR
	}
	@Test
	public void bvaTest16() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "23:30:30", clock.set(23, 30, 30));			// TEST HOUR
	}
	
	
	@Test
	public void bvaTest17() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "12:0:30", clock.set(12, -1, 30));			// TEST MINUTE
	}
	@Test
	public void bvaTest18() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "12:0:30", clock.set(12, 0, 30));			// TEST MINUTE
	}
	@Test
	public void bvaTest19() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "12:0:30", clock.set(12, 60, 30));			// TEST MINUTE
	}
	@Test
	public void bvaTest20() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "12:59:30", clock.set(12, 59, 30));			// TEST MINUTE
	}
	
	
	
	@Test
	public void bvaTest21() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "12:30:0", clock.set(12, 30, -1));			// TEST SECOND
	}
	@Test
	public void bvaTest22() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "12:30:0", clock.set(12, 30, 0));			// TEST SECOND
	}
	@Test
	public void bvaTest23() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "12:30:0", clock.set(12, 30, 60));			// TEST SECOND
	}
	@Test
	public void bvaTest24() {
		Clock clock = new Clock();	// Default: S1 DISPLAY_TIME
		clock.ready();
		assertEquals( "12:30:59", clock.set(12, 30, 59));			// TEST SECOND
	}
	
}
