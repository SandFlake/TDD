package clock;


import static org.junit.Assert.*;
import org.junit.Test; 


public class TestRunner {
	
	//Default mode for clock is S1DisplayTime
	private Clock clock = new Clock();
	
	
	//6 Tests that should run correctly 
		
	// S1 Display Time --> S3 Change Time
	// Correct 
	@Test 
	public void testCorrect1() {
		Clock clock = new Clock();
		String currentMode = clock.ready();
		assertEquals("Change Time", currentMode);
		}
	
	
	//S2 Display Date --> S4 Change Date
	//Correct
	@Test
	public void testCorrect2() {
		Clock clock = new Clock();
		clock.changeMode(); 
		String currentMode = clock.ready();
		assertEquals("Change Date", currentMode);
	}
	
	//S1 Display Time --> S2 Display Date
	//Correct
	@Test
	public void testCorrect3() {
		Clock clock = new Clock();
		String currentMode = clock.changeMode();
		assertEquals("1/1/2000", currentMode);
	}
	
	//S2 Display Date --> S1 Display Time
	//Correct
	@Test
	public void testCorrect4() {
		Clock clock = new Clock();
		clock.changeMode();
		String currentMode = clock.changeMode();
		assertEquals("0:0:0", currentMode);
		
	}
	
	//S3 Change Time --> S1 Display Time
	//Correct
	@Test
	public void testCorrect5() {
		Clock clock = new Clock();
		clock.ready();
		String currentMode = clock.set(5, 27, 53);
		assertEquals("5:27:53", currentMode);
	}
	
	//S4 Change Date --> S2 Display Date
	//Correct
	@Test 
	public void testCorrect6() {
		Clock clock = new Clock();
		clock.changeMode();
		clock.ready();
		String currentMode = clock.set(21, 3, 2019);
		assertEquals("21/3/2019", currentMode);
		
	}
	
	
	
	// 6 tests that should run and get failures 
	
	//S1 Display Time --> want to set time, without getting ready first and going to Change Time S3 
	//Invalid transition
	@Test
	public void testFail1() {
		Clock clock = new Clock();
		String currentMode = clock.set(2, 24, 28);
		assertEquals("2:24:28", currentMode);
	}
	
	//S2 Display Date --> want to set date, without getting ready first and going to Change Date S4 
	//Invalid transition
	@Test
	public void testFail2() {
		Clock clock = new Clock();
		clock.changeMode();
		String currentMode = clock.set(15, 07, 1989);
		assertEquals("15/07/1989", currentMode);
	}
	
	
	//S3 Change Time --> want to change mode to Display Date, but this shouldn't work as we first need to set time and go to Display Time
	//Invalid Transition
	@Test
	public void testFail3() {
		Clock clock = new Clock();
		clock.ready();
		String currentMode = clock.changeMode(); 
		assertEquals("Display Date", currentMode);
	}
	
	//S4 Change Date --> want to change mode to Display Time, but this shouldn't work as we first need to set the date and go to Display Date
	//Invalid transition
	@Test
	public void testFail4() {
		Clock clock = new Clock();
		clock.changeMode();
		clock.ready();
		String currentMode = clock.changeMode();
		assertEquals("Display Time", currentMode);
	}
	
	//S3 Change Time --> want to get ready to change time, but this shouldn't work as we are already in S3 Change Time
	//Invalid Transition
	@Test
	public void testFail5() {
		Clock clock = new Clock();
		clock.ready();
		String currentMode = clock.ready();
		assertEquals("Change Time", currentMode);
	}
	
	//S4 Change Date --> want to get ready to change date, but this shouln't work as we are already in S4 Change Date
	//Invalid Transition
	public void testFail6() {
		Clock clock = new Clock();
		clock.changeMode();
		clock.ready();
		String currentMode = clock.ready();
		assertEquals("Change Date", currentMode);
	}
	
	
	
	
	
	// 24 Boundary Value Analysis Tests
	
	
	
}




